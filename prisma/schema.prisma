// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Position{
  NONE
  ADVISOR
  HEAD_OF_SCHOOL
  OUTLINE_COMMITTEE
  INSTITUTE_COMMITTEE
  EXAMING_COMMITTEE
}

enum Role{
  STUDENT
  COMMITTEE
  ADMIN
  SUPER_ADMIN
}

model Institute{
  id Int            @id @default(autoincrement())
  instituteNameTH   String 
  instituteNameEN   String 

  user              User[]   @relation("userInstitute")
  
  school            School[]   @relation("school")
}

model School{
  id Int          @id @default(autoincrement())
  schoolNameTH    String 
  schoolNameEN    String 

  instituteID     Int
  institute       Institute   @relation("school", fields: [instituteID], references: [id])

  user            User[]    @relation("userSchool")
}

model Program{
  id Int          @id @default(autoincrement())
  programNameTH   String 
  programNameEN   String 
  programYear     String?

  user            User[]    @relation("userProgram")
}

model User {
  id Int            @id @default(autoincrement())
  formLanguage      String?
  prefix            String?
  firstNameTH       String?
  lastNameTH        String?
  firstNameEN       String?
  lastNameEN        String?
  username          String  @unique
  password          String
  email             String?  @unique
  phone             String?
  sex               String?
  degree            String?

  instituteID       Int?
  institute         Institute?    @relation("userInstitute", fields: [instituteID], references: [id])

  schoolID          Int?
  school            School?    @relation("userSchool", fields: [schoolID], references: [id])

  programID         Int?
  program           Program?    @relation("userProgram", fields: [programID], references: [id])

  position          Position
  role              Role
  formState         Int? 
  signatureUrl      String? @db.LongText
  profileUrl        String? @db.LongText
  
  //รับรองผู้ทรงคุณวุติ
  approvedExpert    String?
  //กรรมกรรมนอก/ใน  
  committeeType     String?

  //นศ. มีอาจารย์ที่ปรึกษา
  advisorID         Int?
  advisor           User?    @relation("advisor", fields: [advisorID], references: [id])

  //นศ. มีอาจารย์ที่ปรึกษาร่วม
  coAdvisorID       Int?
  coAdvisor         User?    @relation("coAdvisor", fields: [coAdvisorID], references: [id])
  
  //อาจารย์ที่ปรึกษา เเละ  อาจารย์ที่ปรึกษาร่วม มี นศ. หลายคน
  advisedStudents   User[] @relation("advisor")
  coAdvisedStudents User[] @relation("coAdvisor")

  //นศ. สร้างฟอร์ม
  comprehensiveExamCommitteeForm             ComprehensiveExamCommitteeForm[]     @relation("comprehensiveExamCommitteeFormOwner")
  qualificationExamCommitteeForm             QualificationExamCommitteeForm[]     @relation("qualificationExamCommitteeFormOwner")
  outlineForm                                OutlineForm[]                        @relation("outlineFormOwner")
  thesisProgressForm                         ThesisProgressForm[]                 @relation("thesisProgressFormOwner")
  
  //เป็นกรรมการโครงร่างในฟอมโครงร่าง
  outlineCommittee                           OutlineForm[]      @relation("outlineCommittee")
  //เป็นกรรมการสำนักในฟอมโครงร่าง
  instituteCommittee                         OutlineForm[]      @relation("instituteCommittee")
  //เป็นหัวหน้าสาชา
  headSchool                                 ThesisProgressForm[]      @relation("headSchool")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model ComprehensiveExamCommitteeForm{
  id                  Int       @id @default(autoincrement())
  date                String
  times               Int
  trimester           Int
  academicYear        String
  committeeName1      String
  committeeName2      String
  committeeName3      String
  committeeName4      String
  committeeName5      String
  numberStudent       Int
  examDay             String

  studentID           Int
  student             User      @relation(fields: [studentID], references: [id], name: "comprehensiveExamCommitteeFormOwner")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model QualificationExamCommitteeForm{
  id                  Int       @id @default(autoincrement())
  date                String
  times               Int
  trimester           Int
  academicYear        String
  committeeName1      String
  committeeName2      String
  committeeName3      String
  committeeName4      String
  committeeName5      String
  numberStudent       Int
  examDay             String

  studentID           Int
  student             User     @relation(fields: [studentID], references: [id], name: "qualificationExamCommitteeFormOwner")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model OutlineForm {
  id                           Int       @id @default(autoincrement())
  date                         String
  thesisNameTH                 String
  thesisNameEN                 String
  abstract                     String @db.Text
  processPlan                  Json
  times                        Int
  thesisStartMonth             String
  thesisStartYear              String

  //กรรมการโครงร่าง
  outlineCommitteeStatus      String?
  outlineCommitteeComment     String?
  outlineCommitteeSignUrl     String? @db.LongText
  dateOutlineCommitteeSign    String?
  outlineCommitteeID          Int?
  outlineCommittee            User? @relation(fields: [outlineCommitteeID], references: [id], name: "outlineCommittee")

  //กรรมการสำนัก
  instituteCommitteeStatus    String?
  instituteCommitteeComment   String?
  instituteCommitteeSignUrl   String? @db.LongText
  dateInstituteCommitteeSign  String?
  instituteCommitteeID        Int?
  instituteCommittee          User? @relation(fields: [instituteCommitteeID], references: [id], name: "instituteCommittee")

  studentID                   Int
  student                     User @relation(fields: [studentID], references: [id], name: "outlineFormOwner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThesisProgressForm{
  id                          Int        @id @default(autoincrement())
  times                       Int
  trimester                   Int
  status                      String
  statusComment               String?
  percentage                  Int
  percentageComment           String?
  issues                      String?
  date                        String
  processPlan                 Json
  studentID                   Int
  student                     User      @relation(fields: [studentID], references: [id], name: "thesisProgressFormOwner")

  assessmentResult            String?
  advisorSignUrl              String? @db.LongText
  dateAdvisor                 String?

  headSchoolComment           String?
  headSchoolSignUrl           String? @db.LongText
  dateHeadSchool              String?
  headSchoolID                Int?
  headSchool                  User? @relation(fields: [headSchoolID], references: [id], name: "headSchool")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}